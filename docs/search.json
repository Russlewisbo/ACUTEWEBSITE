[
  {
    "objectID": "Documentation.html",
    "href": "Documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Acute Website",
    "section": "",
    "text": "Principal investigator: Irene Zaghi, M.D.1\nSupervisors: Russell E. Lewis, Pharm.D,2 Monica Cricca, M.D., PhD.,1,3 Vittorio Sambri, M.D., PhD.1,3\n1Laboratorio Unico della AUSL della Romagna, in Pievesestina di Cesena, Italy\n2 Department of Medical and Surgical Sciences, University of Bologna, Italy\n3 Department of Diagnostic and Experimental Medicine, University of Bologna, Italy\n\nCollaborators:\n\nJohn Cohen, M.D., Emeritus Professor, Infectious Diseases, Brighton & Sussex Medical School, and Visiting Professor in Infectious Diseases, Imperial College of Science, Technology & Medicine, London\nJoseph Meletiadis, PhD., Professor of Microbiology in Medical School of National and Kapodistrian University of Athens, Greece\nJason Roberts, Pharm.D., PhD., NHMRC Leadership Fellow, UQ Centre for Clinical Research, Faculty of Medicine, Acting Director, CCR. Faculty of Medicine\n\nFunding: European Society of Clinical Microbiology and Infectious Diseases (ESCMID) 2022 Research Grants Program"
  },
  {
    "objectID": "Publications.html",
    "href": "Publications.html",
    "title": "Publications",
    "section": "",
    "text": "Is timing everything?\n\nA Bayesian meta-analysis of the prognostic and diagnostic utility of bloodculture time-to-positivity (TTP) and differential time-to positivity (DTP) for bloodstream infections\nClick here for the poster\nPresented at 2022 ESCMID Meeting, Lisbon\nAbstract #01824"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Background",
    "section": "",
    "text": "The project will generate fundamental knowledge of how Tpos correlates with established pharmacodynamic indices (e.g. AUC/MIC, %T>MIC). The activity of ceftazidime-avibactam monotherapy, and combination antibiotic regimens will be tested in vitro and then in sera from patients undergoing treatment for KPC-carbapenemase producing Klebsiella pneumoniae (KPC-Kp). \n\n\n\n\n\n\n\nThe objectives of this project will be accomplished through two specific aims and several workpackages:\n\nThe first specific aim will establish the quantitative relationship between Tpos and representative KPC-Kp strains in the absence and presence of clinically-relevant antibiotic exposures.\nThe second specific aim will measure Tpos using sera from 20 critically-ill patients receiving ceftazidime-avibactam treatment for KPC-KP bloodstream infections using KPC-Kp “indicator” strains or the patient’s own isolate. Tpos results will be correlated with blood concentration-time courses of ceftazidime and avibactam and PK/PD target attainment (free drug T>MIC ) simulated for each patient using Bayesian estimates of individual PK parameters from population pharmacokinetic models and LC/MS/MS analysis of ceftazidime-avibactam drug concentrations in serum.\n\nThis study will form the basis for the broader development and validation of Tpos as a surrogate pharmacodynamic (PD) biomarker for monitoring antimicrobial activity of antibiotic monotherapy and combination therapy for Gram-negative infections."
  },
  {
    "objectID": "Summary.html",
    "href": "Summary.html",
    "title": "Summary",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "PKPDmodel.html",
    "href": "PKPDmodel.html",
    "title": "PKPD Model",
    "section": "",
    "text": "Code\nlibrary(PKPDsim)\nlibrary(PKPDplot)\nlibrary (ggplot2)\npk1 <- new_ode_model(model = \"pk_2cmt_iv\") # ceftazidime\npk2 <- new_ode_model(model = \"pk_2cmt_iv\") # avibactam\np <- list(\n  CL = 6.95,\n  V  = 10.5,\n  Q  = 31.5,\n  V2 = 7.57)\n\np2 <- list(\n  CL = 10.2,\n  V  = 11.1,\n  Q  = 5.44,\n  V2 = 6.91)\nn <- 100\n\nomega <- cv_to_omega(list(CL=0.423, V=1.05, Q=0.315, V2=1.10))\n\nomega2 <- cv_to_omega(list(CL=0.591, V=1.07, Q=1.22, V2=6.91))\nr1 <- new_regimen(\n  amt = 2000,\n  interval = 8,\n  n = 5,\n  type = \"infusion\",\n  t_inf = c(2,2,2,2,2)\n)\n\nr2 <- new_regimen(\n  amt = 500,\n  interval = 8,\n  n = 5,\n  type = \"infusion\",\n  t_inf = c(2,2,2,2,2)\n)\ndat <- sim(\n  ode = pk1,\n  parameters = p,\n  omega = omega,\n  n_ind = 20,\n  res_var = list(prop=0.1, add=7.5),\n  regimen = r1, \n  covariates = list(\"SCR\" = new_covariate(value = 80)), output_include = list(parameters=TRUE, variable=TRUE, covariates=TRUE)\n)\n\ndat2 <- sim(\n  ode = pk2,\n  parameters = p2,\n  omega = omega2,\n  n_ind = 20,\n  res_var = list(prop=0.17, add=0.5),\n  regimen = r2, \n  covariates = list(\"SCR\" = new_covariate(value = 80)), output_include = list(parameters=TRUE, variable=TRUE, covariates=TRUE)\n)\n\nplot(dat, show_population = list(obs = TRUE, spaghetti = FALSE, ci = TRUE, \n                                 median =TRUE, regimen = TRUE), ci = c(0.05, 0.95))"
  },
  {
    "objectID": "Workpackage1.html",
    "href": "Workpackage1.html",
    "title": "Workpackage 1",
    "section": "",
    "text": "In this package we will establishing the quantitative relationship of Tpos and KPC-Klebsiella pneumoniae inoculum in blood culture bottles.  The methods for the assay are a modification of those originally proposed by Kaltsas et al.1 Detailed procedures can be found at this link. Methodology for preparing the test inoculum was adapted from CLSI M21A and M26A guidelines.2,3\n\nBriefly, tubes containing 1.8 mL of pooled healthy human serum were inoculated with 0.2 mL of a series of ten-fold dilutions (5x101 to 5x107 CFU/mL) of the standardised inoculum of each test indicator strains.\nThe inoculated sera were then transferred into BacT⁄ALERT bottles without antibiotic inactivating matrix (Biomérieux Inc) for aerobic incubation for 24 hours and monitored for time to positivity.\nTpos results were used to establish preliminary assay quality control ranges by testing in triplicate for five KPC-carbapenemase producing K. pneumoniae strains (KPC_KPCA,B,C and NDM, and VIM producing strains) and a reference K. pneumoniae ATCC strain producing ESBL enzyme only.\nMore detailed information on the isolates can be found here. We will also compare how inoculation of the organism suspension prepared in phosphate buffered saline (PBS-0.9%) versus pooled human serum (serum) affected Tpos.\n\n\n\n\nFigure 1 shows the relationship between Tpos and the K. pneumoniae inoculum. A linear relationship was observed from approximately 101-108 K. pneumoniae CFU/mL and a Tpos measured from 10.5 hours-4.5 hours over the tested inoculum range, with R2 of 0.92-0.94.\n\n\n\n\n\n\nNote\n\n\n\nIn the original methodology proposed by Kaltsas et al,1 the isolate inoculum was reported as the inoculum introduced into the bottle, which already contains between 30-40 mL of growth media (depending on the manufacturer).\nTherefore we have followed this precedent of reporting the inoculum introduced into each bottle. This does not represent the final test inoculum that need to account for the total 42 mL volume in each bloodculture bottle.\nAll experiments were performed using bloodculture bottles without antibiotic inactivating matrix\n\n\n\n\n\n\n\nCode\nlibrary (ggplot2)\nlibrary(scales)\ntheme_set(theme_bw())\n## import raw data from .csv file\nwp1 <- read.csv(\"~/Desktop/ACUTEWEBSITE/wp1a.csv\")\n## plot raw data as x-y graph Tpos graph vs. drug concentrations stratified by dilution matrix, method=\"lm\" is the method for linear regression\nfig1 <-ggplot(wp1, aes(x=inoculum, y=tpos, color=isolates, shape=diluent, fill=isolates)) + geom_point(size=4, alpha = 0.5) + \nscale_y_continuous(name=\"Tpos (hr)\", limits=c(4,12)) +\ntheme(legend.text=element_text(size=12)) +\ngeom_smooth(aes(linetype=diluent), method=lm , color=\"black\", fill=\"#69b3a2\", se=TRUE, inherit.aes = TRUE )\nfig1 + theme_bw(base_size = 14)+ scale_x_log10(name=\"Inoculum CFU/mL\", breaks = trans_breaks(\"log10\",n=7, function(x) 10^x),labels = trans_format(\"log10\", math_format(10^.x)))\n\n\n\n\n\n\n\nCode\n## use forestmangr package to output results of linear regression in Kable-table for display in webpage\nlibrary(forestmangr)\nlibrary(kableExtra)\nwp1 <- read.csv(\"~/Desktop/ACUTEWEBSITE/wp1a.csv\")\ndf <- data.frame (wp1)\ntable1<-lm_table(df, log(inoculum) ~ tpos, \"diluent\")\nkbl(table1)%>%\nkable_paper(\"hover\", full_width = F, position=\"left\")\n\n\n\n\n \n  \n    diluent \n    b0 \n    b1 \n    Rsqr \n    Rsqr_adj \n    Std.Error \n  \n \n\n  \n    pbs \n    32.05074 \n    -2.564975 \n    0.9343070 \n    0.9336227 \n    1.110872 \n  \n  \n    serum \n    33.02361 \n    -2.840223 \n    0.9231703 \n    0.9216023 \n    1.210130 \n  \n\n\n\n\n\n\n\n\n\n\n\nThese data confirm that Tpos exhibits a wide dynamic range as a surrogate indicator for viable CFU/mL."
  },
  {
    "objectID": "Workpackage1.html#package-1b-effect-of-ceftazidimeavibactam-exposure-on-tpos",
    "href": "Workpackage1.html#package-1b-effect-of-ceftazidimeavibactam-exposure-on-tpos",
    "title": "Workpackage 1",
    "section": "Package 1B: Effect of ceftazidime/avibactam exposure on Tpos",
    "text": "Package 1B: Effect of ceftazidime/avibactam exposure on Tpos\nThis workpackage explores how ceftazidime/avibactam concentrations, alone or in combination with other antibiotics, affect Tpos. \n\nMethods\nThe effect of increasing fixed ceftazidime/avibactam (CAZ/AVI) concentrations (4:1) on Tpos was investigated at an inoculum of 1x104 CFU/mL of K. pneumoniae KPC_B (MIC 1 mg/L) and K. pneumoniae NDM producing isolate (negative control, MIC > 64 mg/L ). All experiments were performed in > 5 replicates with an incubation period of 24 hours.\n\n\nResults\nFigure 2 shows a marked increased in the Tpos for KPC_B from < 10 hrs to > 24 hrs when CAZ/AVI concentrations surpassed 1 mg/L. In contrast, the negative control KPC_NDM strain exhibited consistent Tpos < 10hr at all test concentrations with lack of antimicrobial activity. Trends in Tpos relative to antibiotic exposuew were fitted by Loess.\n\n\n\n\n\n\nNote\n\n\n\nDrug concentrations reported in figures represent the concentration of antibiotic injected (1 mL) into the bottle- “simulating” the antibiotic concentrations that would be detected in the bloodstream. These concentrations do not account for 40 mL growth median and inoculum (1 mL) already present in the bottle= total volume 42 mL.\n\n\n\n\nFigure 2. Impact of CAZ/AVI concentrations on Tpos\n\n\nCode\n## simple x-y plot of raw data to show Tpos differences for susceptible versus intrinsically resistant isolate. Trends are highlighted by loess\nlibrary (ggplot2)\ntheme_set(theme_bw())\nceftaz <- read.csv(\"~/Desktop/ACUTEWEBSITE/datasets/ceftazidime.csv\")\nggplot(ceftaz, aes(x=conc, y=tpos, color=isolate, shape=isolate)) + \n  geom_point(size=4, alpha = 0.7)+ \n  geom_smooth(aes(linetype=isolate), method= loess, color=\"black\", fill=\"#69b3a2\", se=TRUE, inherit.aes = TRUE ) +\nscale_x_log10(name=\"CAZ/AVI, mg/L\") +\nscale_y_continuous(name=\"Tpos (hr)\", limits=c(4,25)) \n\n\n\n\n\n\n\n\nThe relationship between ceftazidime/avibactam concentrations and Tpos were analyzed by testing increasing concentrations of ceftazidime (0-8 mg/L) and avibactam (fixed ratio 4:1) using the commercial Avycaz (Zavicefta) formulation in at least 5 replicate experiments performed on separate days.\nBottles were incubated with 1x104 Klebsiella pneumoniae KPC-B strain and incubated at 37°C for 24 hours. Tpos positivity was registered using the BACTEC Alert/3D software\nTpos data versus ceftazidime/avibactam concentrations were then fit to a 4-parameter logistic regression model using the Dose-Response Data Analysis (DRDA) package to estimate PD endpoints.4 Regression results were extracted using the Broom5 and Kableextra6 packages.\nResults of the analysis are shown in Figure 3. Ceftazidime/avibactam exhibited a steep Tpos response from and EC50 of 2.10 (95% CI 2.08-2.12) to and EC90 2.39 (2.33-2.45). The transitional portion of the dose-response curve occurred 1-dilution above the MIC (1 mg/L)determined using Etest strips.\n\n\n\nFigure 3. In vitro pharmacodynamics of CAZ/AVI concentrations vs. Tpos (KP-KPC-B isolate MIC 1 mg/L)\n\n\n\n\n\n\nNote\n\n\n\nExperiments shown below were performed using commercial CAZ/AVI formulation not analytical powder\n\n\n\n\nCode\n## a four-parameter logistic regression model is fit to ceftazidime concencentrations to estiamted PD parameters\nlibrary (readxl)\nlibrary(drda)\ncaz_avi_4 <- read_excel(\"datasets/kpcb_caz_avi_com.xlsx\")\nfit1 <- drda(tpos ~ ctz, data=caz_avi_4, mean_function = \"loglogistic4\", max_iter = 1000)\nplot(fit1, xlab = \"CAZ/AVI Serum (mg/L)\", ylab = \"Tpos (hr)\")\n\n\n\n\n\n\n\nCode\n## Analysis is repeated to produce a table reporting estimated EC10-EC95 parameter estiamtes plus 95% CI \nlibrary (readxl)\nlibrary(drda)\nlibrary(broom)\nlibrary(kableExtra)\ncaz_avi_4 <- read_excel(\"datasets/kpcb_caz_avi_com.xlsx\")\nfit1 <- drda(tpos ~ ctz, data=caz_avi_4, mean_function = \"loglogistic4\", max_iter = 1000)\ned<-effective_dose(fit1, y = c(0.10,0.25,0.50,0.75,0.90,0.95))\nkbl(ed)%>%\nkable_paper(\"hover\", full_width = F, position = \"left\")\n\n\n\n\n \n  \n      \n    Estimate \n    Lower .95 \n    Upper .95 \n  \n \n\n  \n    0.1 \n    1.846039 \n    1.801914 \n    1.890164 \n  \n  \n    0.25 \n    1.970333 \n    1.942340 \n    1.998327 \n  \n  \n    0.5 \n    2.102997 \n    2.081653 \n    2.124341 \n  \n  \n    0.75 \n    2.244593 \n    2.208455 \n    2.280730 \n  \n  \n    0.9 \n    2.395722 \n    2.334370 \n    2.457074 \n  \n  \n    0.95 \n    2.504285 \n    2.416703 \n    2.591867 \n  \n\n\n\n\n\n\n\nThe relationship between ceftazidime/avibactam concentrations and Tpos were analyzed by testing increasing concentrations of ceftazidime (0-8 mg/L) and avibactam (fixed ratio 4:1) using the analytical grade powder. Experiments were performed in at least 5 replicate experiments on separate days.\nBottles were incubated with 1x104 Klebsiella pneumoniae KPC-B strain and incubated at 37°C for 24 hours. Tpos positivity was registered using the BACTEC Alert/3D software\nTpos data versus ceftazidime/avibactam concentrations were then fit to a 4-parameter logistic regression model using the Dose-Response Data Analysis (DRDA) package to estimate PD endpoints.4 Regression results were extracted using the Broom5 and Kableextra6 packages.\nFigure 4 shows the results of the analysis. Ceftazidime/avibactam exhibited a steep Tpos response from and EC50 of 2.10 (95% CI 2.08-2.12) to and EC90 2.39 (2.33-2.45). The transitional portion of the dose-response curve occurred 1-dilution above the MIC (1 mg/L) determined using Etest strips.\n\n\n\n\nExperiments were repeated as described for Figure 3 using the same method but substituting commercial ceftazidime-avibactam formulation (4:1 ratio) against Klebsiella pneumoniae KPC A isolate (ceftazidime/avibactam MIC 2 mg/L).\nResults of the logistic regression demonstrated an EC50 4.14 mg/L (95% CI4.09-4.20) and an EC90 4.78 (95% CI 4.59-4.96). The transitional portion of the dose response curve occurred 1-dilution above the MIC of the isolate (2 mg/L) determined by Etest.\n\n\n\nFigure 4. In vitro pharmacodynamics of CAZ/AVI concentrations vs. Tpos (KP KPC-A isolate MIC 2 mg/L)\n\n\n\n\n\n\nNote\n\n\n\nExperiments performed using the commercial CAZ/AVI formulation.\n\n\n\n\nCode\n## a four-parameter logistic regression model is fit to ceftazidime concencentrations to estiamted PD parameters\nlibrary (readxl)\nlibrary(drda)\ncaz_avi_6 <- read_excel(\"datasets/kpca_caz_avi_com.xlsx\")\nfit3 <- drda(tpos ~ ctz, data=caz_avi_6, mean_function = \"loglogistic4\", max_iter = 1000)\nplot(fit3, xlab = \"CAZ/AVI Serum (mg/L)\", ylab = \"Tpos (hr)\")\n\n\n\n\n\n\n\nCode\n## Analysis is repeated to produce a table reporting estimated EC10-EC95 parametersestiamtes plus 95% CI \nlibrary (readxl)\nlibrary(drda)\nlibrary(broom)\nlibrary(kableExtra)\ncaz_avi_6 <- read_excel(\"datasets/kpca_caz_avi_com.xlsx\")\nfit3 <- drda(tpos ~ ctz, data=caz_avi_6, mean_function = \"loglogistic4\", max_iter = 1000)\ned<-effective_dose(fit3, y = c(0.10,0.25,0.50,0.75,0.90,0.95))\nkbl(ed)%>%\nkable_paper(\"hover\", full_width = F, position = \"left\")\n\n\n\n\n \n  \n      \n    Estimate \n    Lower .95 \n    Upper .95 \n  \n \n\n  \n    0.1 \n    3.596272 \n    3.478003 \n    3.714541 \n  \n  \n    0.25 \n    3.861354 \n    3.802319 \n    3.920388 \n  \n  \n    0.5 \n    4.145974 \n    4.098128 \n    4.193821 \n  \n  \n    0.75 \n    4.451575 \n    4.337013 \n    4.566137 \n  \n  \n    0.9 \n    4.779700 \n    4.595158 \n    4.964243 \n  \n  \n    0.95 \n    5.016587 \n    4.783567 \n    5.249606 \n  \n\n\n\n\n\n\n\nAn additional set of experiments were performed using the same methodology and the analytical grade powder of ceftazidime-avibactam formulation (4:1 ratio) against Klebsiella pneumoniae KPC A isolate (ceftazidime/avibactam MIC 2 mg/L).\nResults of the logistic regression are shown in Figure 5 and demonstrated an EC50 4.55 mg/L (95% CI4.29-4.83) and an EC90 6.89 (95% CI 5.71-8.08). The transitional portion of the dose response curve was relatively broader and occurred 1-3 dilutions above the MIC of the isolate (2 mg/L) determined by Etest.\n\n\n\nFigure 5. In vitro pharmacodynamics of CAZ/AVI concentrations vs. Tpos (KP KPC-A isolate MIC 2 mg/L)\n\n\n\n\n\n\nNote\n\n\n\nExperiments performed using pure powder at a CAZ:AVI ratio of 4:1\n\n\n\n\nCode\n## a four-parameter logistic regression model is fit to ceftazidime concencentrations to estiamted PD parameters\nlibrary (readxl)\nlibrary(drda)\ncaz_avi_5 <- read_excel(\"datasets/kpcb_caz_avi_powder_4-1.xlsx\")\nfit2 <- drda(tpos ~ ctz, data=caz_avi_5, mean_function = \"loglogistic4\", max_iter = 1000)\nplot(fit2, xlab = \"CAZ/AVI Serum (mg/L)\", ylab = \"Tpos (hr)\")\n\n\n\n\n\n\n\nCode\n## Analysis is repeated to produce a table reporting estimated EC10-EC95 parametersestiamtes plus 95% CI \nlibrary (readxl)\nlibrary(drda)\nlibrary(broom)\nlibrary(kableExtra)\ncaz_avi_5 <- read_excel(\"datasets/kpcb_caz_avi_powder_4-1.xlsx\")\nfit2 <- drda(tpos ~ ctz, data=caz_avi_5, mean_function = \"loglogistic4\", max_iter = 1000)\ned<-effective_dose(fit2, y = c(0.10,0.25,0.50,0.75,0.90,0.95))\nkbl(ed)%>%\nkable_paper(\"hover\", full_width = F, position = \"left\")\n\n\n\n\n \n  \n      \n    Estimate \n    Lower .95 \n    Upper .95 \n  \n \n\n  \n    0.1 \n    1.333009 \n    0.9970841 \n    1.668934 \n  \n  \n    0.25 \n    1.868259 \n    1.5935593 \n    2.142960 \n  \n  \n    0.5 \n    2.618432 \n    2.2872915 \n    2.949573 \n  \n  \n    0.75 \n    3.669826 \n    3.0481237 \n    4.291528 \n  \n  \n    0.9 \n    5.143391 \n    3.8260787 \n    6.460704 \n  \n  \n    0.95 \n    6.470852 \n    3.0385262 \n    9.903177 \n  \n\n\n\n\n\n\n\nWe further explored how the results would change if a single fixed concentration of avibactam (4 mg/L) was used in all tubes. Experiments were repeated as described for Figure 3 using the same method and the analytical-grade powder of ceftazidime-avibactam formulation with at fixed avibactam concentrations against Klebsiella pneumoniae KPC B isolate (ceftazidime/avibactam MIC 1 mg/L).\nResults of the logistic regression are shown in Figure 6 and demonstrated a lower EC50 4.14 mg/L (95% CI 4.09-4.19 ) and an EC90 4.77 (95% CI 4.59-4.96). The transitional portion of the dose response curve was relatively broader but occurred 1-3 dilutions near the MIC of the isolate (2 mg/L) determined by Etest.\n\n\n\nFigure 6. In vitro pharmacodynamics of CAZ/AVI concentrations vs. Tpos (KP KPC-A isolate MIC 2 mg/L)\n\n\n\n\n\n\nNote\n\n\n\nExperiments performed using pure powder with a fixed avibactam concentration of 4 mg/L in all ceftazidime containing bottles.\n\n\n\n\nCode\n## a four-parameter logistic regression model is fit to ceftazidime concencentrations to estiamted PD parameters\nlibrary (readxl)\nlibrary(drda)\ncaz_avi_7 <- read_excel(\"datasets/kpca_caz_avi_powder_4-1.xlsx\")\nfit4 <- drda(tpos ~ ctz, data=caz_avi_7, mean_function = \"loglogistic4\", max_iter = 1000)\nplot(fit4, xlab = \"CAZ/AVI Serum (mg/L)\", ylab = \"Tpos (hr)\")\n\n\n\n\n\n\n\nCode\n## Analysis is repeated to produce a table reporting estimated EC10-EC95 parametersestiamtes plus 95% CI \nlibrary (readxl)\nlibrary(drda)\nlibrary(broom)\nlibrary(kableExtra)\ncaz_avi_7 <- read_excel(\"datasets/kpca_caz_avi_powder_4-1.xlsx\")\nfit4 <- drda(tpos ~ ctz, data=caz_avi_7, mean_function = \"loglogistic4\", max_iter = 1000)\ned<-effective_dose(fit4, y = c(0.10,0.25,0.50,0.75,0.90,0.95))\nkbl(ed)%>%\nkable_paper(\"hover\", full_width = F, position = \"left\")\n\n\n\n\n \n  \n      \n    Estimate \n    Lower .95 \n    Upper .95 \n  \n \n\n  \n    0.1 \n    3.012625 \n    2.609006 \n    3.416244 \n  \n  \n    0.25 \n    3.705997 \n    3.436320 \n    3.975674 \n  \n  \n    0.5 \n    4.558953 \n    4.288497 \n    4.829408 \n  \n  \n    0.75 \n    5.608220 \n    5.095029 \n    6.121412 \n  \n  \n    0.9 \n    6.898983 \n    5.714913 \n    8.083052 \n  \n  \n    0.95 \n    7.942748 \n    4.904691 \n    10.980806 \n  \n\n\n\n\n\n\n\nWe also explored how the results would change if a single fixed concentration of avibactam (4 mg/L) was used in all tubes. Experiments were repeated as previously described and the analytical powder of ceftazidime-avibactam formulation with at fixed avibactam concentrations against Klebsiella pneumoniae KPC B isolate (ceftazidime/avibactam MIC 1 mg/L).\nResults of the logistic regression are shown in Figure 6 and demonstrated a lower EC50 1.28 mg/L (95% CI 1.18-1.38) and an EC90 2.66 (95% CI 1.87-3.44). The transitional portion of the dose response curve was relatively broader but occurred 1-3 dilutions near the MIC of the isolate (1 mg/L) determined by Etest.\n\n\n\nFigure 7. In vitro pharmacodynamics of CAZ/AVI concentrations vs. Tpos (KP KPC-B isolate MIC 2 mg/L)\n\n\n\n\n\n\nNote\n\n\n\nExperiments were repeated using pure powder but with a fixed concentration of avibactam at 4 mg/L in all tubes\n\n\n\n\nCode\n## a four-parameter logistic regression model is fit to ceftazidime concencentrations to estiamted PD parameters\nlibrary (readxl)\nlibrary(drda)\ncaz_avi_8 <- read_excel(\"datasets/kpcb_caz_avi_powder_fix4.xlsx\")\nfit5<- drda(tpos ~ ctz, data=caz_avi_8, mean_function = \"loglogistic4\", max_iter = 1000)\nplot(fit5, xlab = \"CAZ/AVI Serum (mg/L)\", ylab = \"Tpos (hr)\")\n\n\n\n\n\n\n\nCode\n## Analysis is repeated to produce a table reporting estimated EC10-EC95 parametersestiamtes plus 95% CI \nlibrary (readxl)\nlibrary(drda)\nlibrary(broom)\nlibrary(kableExtra)\ncaz_avi_8 <- read_excel(\"datasets/kpcb_caz_avi_powder_fix4.xlsx\")\nfit5 <- drda(tpos ~ ctz, data=caz_avi_8, mean_function = \"loglogistic4\", max_iter = 1000)\ned<-effective_dose(fit5, y = c(0.10,0.25,0.50,0.75,0.90,0.95))\nkbl(ed)%>%\nkable_paper(\"hover\", full_width = F, position = \"left\")\n\n\n\n\n \n  \n      \n    Estimate \n    Lower .95 \n    Upper .95 \n  \n \n\n  \n    0.1 \n    0.5304440 \n    0.3759849 \n    0.6849032 \n  \n  \n    0.25 \n    0.6782345 \n    0.5560370 \n    0.8004320 \n  \n  \n    0.5 \n    0.8672018 \n    0.7848848 \n    0.9495189 \n  \n  \n    0.75 \n    1.1088186 \n    0.9756342 \n    1.2420030 \n  \n  \n    0.9 \n    1.4177537 \n    1.0693014 \n    1.7662060 \n  \n  \n    0.95 \n    1.6757127 \n    0.8829137 \n    2.4685116 \n  \n\n\n\n\n\n\n\n\n\n\n\nThese data confirm that Tpos recapitulates classical PD endpoints and the relationship of ceftazidime/avibactam concentrations versus Tpos follows classical sigmoidal dose response relationship with a steep transitional portion of the dose response curve that occurs near the MIC of the pathogen. Although ED50/90 estimates were broadly similar if the commercial (patient) and analytical powder formulations were tested, used of high-fixed concentrations of avibactam resulted in lower EC50/90 estimates and broader concentration-effect curves."
  },
  {
    "objectID": "Workpackage1.html#package-1b-effect-of-combination-antimicrobial-exposure-on-tpos",
    "href": "Workpackage1.html#package-1b-effect-of-combination-antimicrobial-exposure-on-tpos",
    "title": "Workpackage 1",
    "section": "Package 1B: Effect of combination antimicrobial exposure on Tpos",
    "text": "Package 1B: Effect of combination antimicrobial exposure on Tpos\n\nMethods\n\nThe activity of combination ceftazidime/avibactam (4 to 1 ratio from commercial formulation) plus gentamicin (0-4 mg/L) was tested against Klebsiella pneumonia_KPC_B strain in 5 replicate experiments.\nThe effect of the antibiotic combinations Tpos combination was analyzed using a Bliss Independence Model of drug interaction using a workflow described for the synergy analysis using the BIGL package.7\nThe first step of the fitting procedure will consist in treating marginal data only, i.e. those observations within the experiment where one of the compounds is dosed at zero. For each compound the corresponding marginal doses are modelled using a 4-parameter logistic model\nThe marginal models will be estimated together using non-linear least squares estimation procedure. A simple sum-of-squared-residuals minimization driven by a default Nelder-Mead algorithm from optim minimizer was used.\nPresence of synergistic or antagonistic effects was formalized by means of the meanR and maxR test. meanR test evaluates how the predicted response surface based on a specified null model differs from the observed one. If the null hypothesis is rejected, this test suggests that at least some dose combinations may exhibit synergistic or antagonistic behaviour. The meanR test is not designed to pinpoint which combinations produce these effects nor what type of deviating effect is present.\nmaxR test allows to evaluate presence of synergistic/antagonistic effects for each dose combination and as such provides a point-by-point classification.\n\n\n\nResults\n\nThe results sown in Figure 8 demonstrated that CTZ/AVI + gentamicin is broadly synergistic over the range of tested concentrations, with and average 4.29 hr increase (95% CI 2.65-6.46) in Tpos versus the predicted null interactive response of ceftazidime-avibactam and gentamicin alone.\n\n\n\nFigure 8. In vitro effects of combination ceftazidime/avibactam + gentamicin\n\n\nCode\nlibrary(BIGL)\nlibrary(knitr)\nlibrary(rgl)\nlibrary(ggplot2)\nlibrary(broom)\nlibrary(kableExtra)\nset.seed(12345)\ncutoff <- 0.95\ncaz_gent_kpcb <- read.csv(\"~/Desktop/ACUTEWEBSITE/datasets/caz_gent_kpcb.csv\")\n## Fitting marginal models, maximal fixed at 24 hours, minimal at 9 hours\nmarginalFit <- fitMarginals(caz_gent_kpcb, method = \"optim\",                 \n                            fixed = c(\"m1\" = 24, \"m2\" = 24, \"b\" = 9),\n                            names = c(\"CTZ/AVI\", \"GENT\"))\nsummary(marginalFit)\n\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI   GENT\nSlope              2.948  6.675\nMaximal response  24.000 24.000\nlog10(EC50)        0.485 -0.246\n\nCommon baseline at: 9\n\n\nCode\n## Plotting marginal model for ceftazidime and gentamicin, minimum constrained at 9 hrs and maximum contrastined at 24 hours\nplot(marginalFit) + ggtitle(paste(\"Ceftazidime/Avibactam + Gentamicin\"))\n\n\n\n\n\nCode\nrs <- fitSurface(caz_gent_kpcb, marginalFit,\n                 null_model = \"bliss\",\n                 B.CP = 50, statistic = \"none\", parallel = FALSE)\nsummary(rs)\n\n\nNull model: Bliss independence with shared maximal response\nVariance assumption used: \"equal\"\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI   GENT\nSlope              2.948  6.675\nMaximal response  24.000 24.000\nlog10(EC50)        0.485 -0.246\n\nCommon baseline at: 9\n\n\n\nNo test statistics were computed.\nCONFIDENCE INTERVALS\nOverall effect\nEstimated mean departure from null response surface with 95% confidence interval:\n4.0374 [1.1143, 7.5135]\nEvidence for effects in data: Syn \n\nSignificant pointwise effects\n        estimate  lower   upper call\n0.5_0.5   5.5789 1.1548 10.0031  Syn\n1_0.5     9.1981 6.2674 12.1288  Syn\n2_0.25   11.1988 7.7384 14.6592  Syn\n2_0.5     8.1567 4.3602 11.9531  Syn\n\nPointwise 95% confidence intervals summary:\n Syn Ant Total\n   4   0    12\n\n\nCode\nplot(rs, legend = FALSE, main = \"\")\nview3d(0, -75)\nrglwidget()\n\n\n\n\n\n\nCode\n## mean R statistic evaluates how the test evaluates how the predicted response surface based on a specified null model differs from the observed one. If the null hypothesis is rejected, this test suggests that at least some dose combinations may exhibit synergistic or antagonistic behaviour. The meanR test is not designed to pinpoint which combinations produce these effects nor what type of deviating effect is present.\nmeanR_N <-fitSurface(caz_gent_kpcb, marginalFit, statistic=\"meanR\",CP=rs$CP, B.B=20, parallel = FALSE)\n\n# maxR test allows to evaluate presence of synergistic/antagonistic effects for each dose combination and as such provides a point-by-point classification.\nmaxR_N <- fitSurface(caz_gent_kpcb, marginalFit,\n                     statistic = \"maxR\", CP = rs$CP, B.B = 20,\n                     parallel = FALSE)\nmaxR_B <- fitSurface(caz_gent_kpcb, marginalFit,\n                     statistic = \"maxR\", CP = rs$CP, B.B = 20,\n                     parallel = FALSE)\nmaxR_both <- rbind(summary(maxR_N$maxR)$totals,\n                   summary(maxR_B$maxR)$totals)\n\ncontour(maxR_B,\n         ## colorPalette = c(\"blue\", \"black\", \"black\", \"red\"),\n        main = paste0(\" Ceftazidime/Avibactam + Gentamicin\"),\n        scientific = TRUE, digits = 3, cutoff = cutoff)\n\n\n\n\n\nCode\nplotConfInt(maxR_B, color =\"effect-size\")\n\n\n\n\n\nCode\nrsh <- fitSurface(caz_gent_kpcb, marginalFit,\n                  null_model = \"hsa\",\n                  B.CP = 50, statistic = \"both\", parallel = FALSE)\nsummary(rsh)\n\n\nNull model: Highest Single Agent with shared maximal response\nVariance assumption used: \"equal\"\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI   GENT\nSlope              2.948  6.675\nMaximal response  24.000 24.000\nlog10(EC50)        0.485 -0.246\n\nCommon baseline at: 9\n\nExact meanR test (H0 = no synergy/antagonism):\n    F(12,27) = 20.4109 (p-value = 0)\n\nEvidence for effects in data: Syn\nPoints with significant deviations from the null: \n       d1   d2      absR p-value call\n1_0.5   1 0.50  8.566364  <2e-16  Syn\n2_0.25  2 0.25 10.640387  <2e-16  Syn\n2_0.5   2 0.50  6.973146  <2e-16  Syn\n\nOverall maxR summary:\n Call Syn Ant Total\n  Syn   3   0    12\n\nCONFIDENCE INTERVALS\nOverall effect\nEstimated mean departure from null response surface with 95% confidence interval:\n4.4239 [0.5981, 8.3909]\nEvidence for effects in data: Syn \n\nSignificant pointwise effects\n        estimate  lower   upper call\n0.5_0.5   5.6295 1.1814 10.0776  Syn\n1_0.5     9.5759 6.6232 12.5287  Syn\n2_0.25   11.2474 8.3394 14.1554  Syn\n2_0.5    10.5045 6.6817 14.3272  Syn\n\nPointwise 95% confidence intervals summary:\n Syn Ant Total\n   4   0    12\n\n\nCode\nrsb <- fitSurface(caz_gent_kpcb, marginalFit, \n                  null_model = \"bliss\",\n                  B.CP = 50, statistic = \"both\", parallel = FALSE)\nsummary(rsb)\n\n\nNull model: Bliss independence with shared maximal response\nVariance assumption used: \"equal\"\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI   GENT\nSlope              2.948  6.675\nMaximal response  24.000 24.000\nlog10(EC50)        0.485 -0.246\n\nCommon baseline at: 9\n\nExact meanR test (H0 = no synergy/antagonism):\n    F(12,27) = 21.5311 (p-value = 0)\n\nEvidence for effects in data: Syn\nPoints with significant deviations from the null: \n       d1   d2      absR p-value call\n1_0.5   1 0.50  9.916196  <2e-16  Syn\n2_0.25  2 0.25 10.848414  <2e-16  Syn\n2_0.5   2 0.50  5.307784   9e-05  Syn\n\nOverall maxR summary:\n Call Syn Ant Total\n  Syn   3   0    12\n\nCONFIDENCE INTERVALS\nOverall effect\nEstimated mean departure from null response surface with 95% confidence interval:\n4.0374 [1.0765, 7.0119]\nEvidence for effects in data: Syn \n\nSignificant pointwise effects\n        estimate  lower   upper call\n0.5_0.5   5.5789 1.4003  9.7576  Syn\n1_0.5     9.1981 6.2759 12.1203  Syn\n2_0.25   11.1988 8.3840 14.0136  Syn\n2_0.5     8.1567 4.8719 11.4414  Syn\n\nPointwise 95% confidence intervals summary:\n Syn Ant Total\n   4   0    12\n\n\n\n\nThe activity of combination ceftazidime/avibactam (4 to 1 ratio from commercial formulation) plus aztreonam (0-40 mg/L) was tested against Klebsiella pneumonia_KPC_A strain in 5 replicate experiments using the same methodology.\nResults are shown in Figure 9.\n\n\n\nFigure 9. In vitro effects of combination ceftazidime/avibactam + gentamicin\n\n\nCode\nlibrary(BIGL)\nlibrary(knitr)\nlibrary(rgl)\nlibrary(ggplot2)\nlibrary(broom)\nlibrary(kableExtra)\nset.seed(12345)\ncutoff <- 0.95\ncaz_gent_kpca <- read.csv(\"~/Desktop/ACUTEWEBSITE/datasets/caz_gent_kpca.csv\")\n## Fitting marginal models, maximal fixed at 24 hours, minimal at 9 hours\nmarginalFit2 <- fitMarginals(caz_gent_kpcb, method = \"optim\",                 \n                            fixed = c(\"m1\" = 24, \"m2\" = 24, \"b\" = 9),\n                            names = c(\"CTZ/AVI\", \"GENT\"))\nsummary(marginalFit2)\n\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI   GENT\nSlope              2.948  6.675\nMaximal response  24.000 24.000\nlog10(EC50)        0.485 -0.246\n\nCommon baseline at: 9\n\n\nCode\n## Plotting marginal model for ceftazidime and gentamicin, minimum constrained at 9 hrs and maximum contrastined at 24 hours\nplot(marginalFit2) + ggtitle(paste(\"Ceftazidime/Avibactam + Gentamicin\"))\n\n\n\n\n\nCode\nrs2 <- fitSurface(caz_gent_kpca, marginalFit2,\n                 null_model = \"bliss\",\n                 B.CP = 50, statistic = \"none\", parallel = FALSE)\nsummary(rs2)\n\n\nNull model: Bliss independence with shared maximal response\nVariance assumption used: \"equal\"\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI   GENT\nSlope              2.948  6.675\nMaximal response  24.000 24.000\nlog10(EC50)        0.485 -0.246\n\nCommon baseline at: 9\n\n\n\nNo test statistics were computed.\nCONFIDENCE INTERVALS\nOverall effect\nEstimated mean departure from null response surface with 95% confidence interval:\n-4.1232 [-6.1317, -2.5831]\nEvidence for effects in data: Ant \n\nSignificant pointwise effects\n    estimate    lower    upper call\n1_1 -13.6766 -17.3080 -10.0453  Ant\n2_1 -10.1735 -11.8815  -8.4656  Ant\n\nPointwise 95% confidence intervals summary:\n Syn Ant Total\n   0   2     6\n\n\nCode\nplot(rs2, legend = FALSE, main = \"\")\nview3d(0, -75)\nrglwidget()\n\n\n\n\n\n\nCode\n## mean R statistic evaluates how the test evaluates how the predicted response surface based on a specified null model differs from the observed one. If the null hypothesis is rejected, this test suggests that at least some dose combinations may exhibit synergistic or antagonistic behaviour. The meanR test is not designed to pinpoint which combinations produce these effects nor what type of deviating effect is present.\nmeanR_N2 <-fitSurface(caz_gent_kpca, marginalFit2, statistic=\"meanR\",CP=rs2$CP, B.B=20, parallel = FALSE)\n\n# maxR test allows to evaluate presence of synergistic/antagonistic effects for each dose combination and as such provides a point-by-point classification.\nmaxR_N2 <- fitSurface(caz_gent_kpca, marginalFit2,\n                     statistic = \"maxR\", CP = rs2$CP, B.B = 20,\n                     parallel = FALSE)\nmaxR_B2 <- fitSurface(caz_gent_kpca, marginalFit2,\n                     statistic = \"maxR\", CP = rs2$CP, B.B = 20,\n                     parallel = FALSE)\nmaxR_both2 <- rbind(summary(maxR_N2$maxR)$totals,\n                   summary(maxR_B2$maxR)$totals)\n\ncontour(maxR_B2,\n         ## colorPalette = c(\"blue\", \"black\", \"black\", \"red\"),\n        main = paste0(\" Ceftazidime/Avibactam + Gentamicin\"),\n        scientific = TRUE, digits = 3, cutoff = cutoff)\n\n\n\n\n\nCode\nplotConfInt(maxR_B2, color =\"effect-size\")\n\n\n\n\n\nCode\nrsh2 <- fitSurface(caz_gent_kpca, marginalFit2,\n                  null_model = \"hsa\",\n                  B.CP = 50, statistic = \"both\", parallel = FALSE)\nsummary(rsh2)\n\n\nNull model: Highest Single Agent with shared maximal response\nVariance assumption used: \"equal\"\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI   GENT\nSlope              2.948  6.675\nMaximal response  24.000 24.000\nlog10(EC50)        0.485 -0.246\n\nCommon baseline at: 9\n\nExact meanR test (H0 = no synergy/antagonism):\n    F(6,27) = 28.3674 (p-value = 0)\n\nEvidence for effects in data: Ant\nPoints with significant deviations from the null: \n    d1 d2      absR p-value call\n1_1  1  1  6.994562  <2e-16  Ant\n2_1  2  1 10.939047  <2e-16  Ant\n\nOverall maxR summary:\n Call Syn Ant Total\n  Ant   0   2     6\n\nCONFIDENCE INTERVALS\nOverall effect\nEstimated mean departure from null response surface with 95% confidence interval:\n-4.0696 [-6.4623, -2.7881]\nEvidence for effects in data: Ant \n\nSignificant pointwise effects\n    estimate    lower   upper call\n1_1 -13.6646 -17.4063 -9.9229  Ant\n2_1 -10.0986 -11.8876 -8.3095  Ant\n\nPointwise 95% confidence intervals summary:\n Syn Ant Total\n   0   2     6\n\n\nCode\nrsb2 <- fitSurface(caz_gent_kpca, marginalFit2, \n                  null_model = \"bliss\",\n                  B.CP = 50, statistic = \"both\", parallel = FALSE)\nsummary(rsb2)\n\n\nNull model: Bliss independence with shared maximal response\nVariance assumption used: \"equal\"\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI   GENT\nSlope              2.948  6.675\nMaximal response  24.000 24.000\nlog10(EC50)        0.485 -0.246\n\nCommon baseline at: 9\n\nExact meanR test (H0 = no synergy/antagonism):\n    F(6,27) = 27.5033 (p-value = 0)\n\nEvidence for effects in data: Ant\nPoints with significant deviations from the null: \n    d1 d2      absR p-value call\n1_1  1  1  6.845024  <2e-16  Ant\n2_1  2  1 10.847476  <2e-16  Ant\n\nOverall maxR summary:\n Call Syn Ant Total\n  Ant   0   2     6\n\nCONFIDENCE INTERVALS\nOverall effect\nEstimated mean departure from null response surface with 95% confidence interval:\n-4.1232 [-5.3939, -1.2063]\nEvidence for effects in data: Ant \n\nSignificant pointwise effects\n    estimate    lower   upper call\n1_1 -13.6766 -18.3106 -9.0427  Ant\n2_1 -10.1735 -12.3695 -7.9776  Ant\n\nPointwise 95% confidence intervals summary:\n Syn Ant Total\n   0   2     6\n\n\n\n\nCeftazidime-avibactam + aztreonam synergy against K. pneumoniae NDM-1 strain.\n\nThe activity of combination ceftazidime/avibactam (4 to 1 ratio from commercial formulation) plus aztreonam (0-40 mg/L) was tested against Klebsiella pneumonia_KPC_B strain in 3 replicate experiments.\nThe effect of the Tpos combination was analyzed using a Bliss Independence Model of drug interaction using a workflow described for the synergy analysis using the BIGL package.7\nThe results sown in Figure 8 demonstrated that CTZ/AVI + aztreonam is broadly synergistic over the range of tested concentrations, with and average 3.6 hr increase (95% CI 1.76-6.23) in Tpos versus the predicted null interactive response of ceftazidime-avibactam and gentamicin alone.\n\n\n\nFigure 10. In vitro effects of combination ceftazidime/avibactam + aztreonam against NDM-1 producing isolate.\n\nThe activity of combination ceftazidime/avibactam (4 to 1 ratio from commercial product) plus aztreonam (1.25-40 mg/L) was tested against and NDM-2 producing Klebsiella pneumoniae isolate (ceftazidime/avibactam MIC > 64 mg/L).\nThe effect of the Tpos combination was analyzed using a Bliss Independence Model of Drug interaction.\nThe results demonstrated that CTZ/AVI + aztreonam is broadly synergistic over a range of clinically achieved concentrations, with an average 8.54 hr (95% CI 8.46-8.60) increase in Tpos versus the predicted null response for each individual drug.\n\n\n\nCode\nlibrary(BIGL)\nlibrary(knitr)\nlibrary(rgl)\nlibrary(ggplot2)\nlibrary(broom)\nlibrary(kableExtra)\nset.seed(12345)\ncutoff <- 0.95\ncaz_azt <- read.csv(\"~/Desktop/ACUTEWEBSITE/datasets/caz_avi_azt.csv\")\n## Fitting marginal models, maximal fixed at 24 hours, minimal at 8.5 hours\nmarginalFit2 <- fitMarginals(caz_azt, method = \"optim\",                 \n                            fixed = c(\"m1\" = 24, \"m2\" = 24, \"b\" = 9),\n                            names = c(\"CTZ/AVI\", \"AZT\"))\nsummary(marginalFit)\n\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI   GENT\nSlope              2.948  6.675\nMaximal response  24.000 24.000\nlog10(EC50)        0.485 -0.246\n\nCommon baseline at: 9\n\n\nCode\n## Plotting marginal model for ceftazidime/avibactam and aztroenam, minimum constrained at 9 hrs and maximum constrained at 24 hours\nplot(marginalFit2) + ggtitle(paste(\"Ceftazidime/Avibactam + Aztreonam\"))\n\n\n\n\n\nCode\nrs2 <- fitSurface(caz_azt, marginalFit2,\n                 null_model = \"bliss\",\n                 B.CP = 50, statistic = \"none\", parallel = FALSE)\nsummary(rs2)\n\n\nNull model: Bliss independence with shared maximal response\nVariance assumption used: \"equal\"\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI    AZT\nSlope              0.231  1.358\nMaximal response  24.000 24.000\nlog10(EC50)        6.637  1.853\n\nCommon baseline at: 9\n\n\n\nNo test statistics were computed.\nCONFIDENCE INTERVALS\nOverall effect\nEstimated mean departure from null response surface with 95% confidence interval:\n8.544 [8.4583, 8.6002]\nEvidence for effects in data: Syn \n\nSignificant pointwise effects\n           estimate   lower   upper call\n0.25_0.03    2.4052  0.6820  4.1283  Syn\n0.25_0.06    2.5146  0.6929  4.3363  Syn\n0.25_0.125   2.6829  0.6561  4.7097  Syn\n0.25_0.25    4.0138  2.0678  5.9597  Syn\n0.5_0.03     2.1320  0.1442  4.1198  Syn\n0.5_0.06     3.2364  1.4374  5.0354  Syn\n0.5_0.125    8.3381  6.5083 10.1679  Syn\n0.5_0.25    14.6256 12.6764 16.5749  Syn\n1_0.03       3.5701  1.6561  5.4841  Syn\n1_0.06       3.7929  1.8896  5.6961  Syn\n1_0.125      9.3062  7.4000 11.2124  Syn\n1_0.25      14.5638 12.5436 16.5839  Syn\n1_0.5       10.3032  8.0238 12.5827  Syn\n1_1         14.5264 12.1478 16.9049  Syn\n1_2         14.4579 11.9577 16.9580  Syn\n2_0.5       14.4814 12.1020 16.8608  Syn\n2_1         14.4546 11.9836 16.9256  Syn\n2_2         14.3865 11.8026 16.9703  Syn\n\nPointwise 95% confidence intervals summary:\n Syn Ant Total\n  18   0    18\n\n\nCode\nplot(rs2, legend = FALSE, main = \"\")\nview3d(0, -75)\nrglwidget()\n\n\n\n\n\n\nCode\nrsh2 <- fitSurface(caz_azt, marginalFit2,\n                  null_model = \"hsa\",\n                  B.CP = 50, statistic = \"both\", parallel = FALSE)\nsummary(rsh2)\n\n\nNull model: Highest Single Agent with shared maximal response\nVariance assumption used: \"equal\"\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI    AZT\nSlope              0.231  1.358\nMaximal response  24.000 24.000\nlog10(EC50)        6.637  1.853\n\nCommon baseline at: 9\n\nExact meanR test (H0 = no synergy/antagonism):\n    F(18,27) = 277.5728 (p-value < 2e-16)\n\nEvidence for effects in data: Syn\nPoints with significant deviations from the null: \n             d1    d2      absR p-value call\n0.25_0.03  0.25 0.030 14.594435  <2e-16  Ant\n0.25_0.06  0.25 0.060 12.622260  <2e-16  Ant\n0.25_0.125 0.25 0.125  9.760292  <2e-16  Ant\n0.25_0.25  0.25 0.250 11.489295  <2e-16  Ant\n0.5_0.03   0.50 0.030 11.072092  <2e-16  Ant\n0.5_0.06   0.50 0.060 17.764340  <2e-16  Ant\n0.5_0.125  0.50 0.125 10.249983  <2e-16  Syn\n0.5_0.25   0.50 0.250 36.335796  <2e-16  Syn\n1_0.03     1.00 0.030 13.350538  <2e-16  Ant\n1_0.06     1.00 0.060 16.803870  <2e-16  Ant\n1_0.125    1.00 0.125 10.942380  <2e-16  Syn\n1_0.25     1.00 0.250 31.819974  <2e-16  Syn\n1_0.5      1.00 0.500  5.301831 0.00015  Syn\n1_1        1.00 1.000 15.586744  <2e-16  Syn\n1_2        1.00 2.000 13.220134  <2e-16  Syn\n2_0.5      2.00 0.500 14.988750  <2e-16  Syn\n2_1        2.00 1.000 12.733381  <2e-16  Syn\n2_2        2.00 2.000 10.379126  <2e-16  Syn\n\nOverall maxR summary:\n Call Syn Ant Total\n  Syn  10   8    18\n\nCONFIDENCE INTERVALS\nOverall effect\nEstimated mean departure from null response surface with 95% confidence interval:\n8.565 [8.5291, 8.593]\nEvidence for effects in data: Syn \n\nSignificant pointwise effects\n           estimate   lower   upper call\n0.25_0.03    2.4055  1.1988  3.6123  Syn\n0.25_0.06    2.5155  1.2716  3.7595  Syn\n0.25_0.125   2.6855  1.3356  4.0355  Syn\n0.25_0.25    4.0205  2.7561  5.2850  Syn\n0.5_0.03     2.1324  0.7465  3.5183  Syn\n0.5_0.06     3.2374  1.9943  4.4805  Syn\n0.5_0.125    8.3407  7.1102  9.5712  Syn\n0.5_0.25    14.6324 13.3609 15.9039  Syn\n1_0.03       3.5705  2.2217  4.9193  Syn\n1_0.06       3.7938  2.4747  5.1129  Syn\n1_0.125      9.3088  8.0181 10.5995  Syn\n1_0.25      14.5705 13.2410 15.8999  Syn\n1_0.5       10.3205  8.8604 11.7806  Syn\n1_1         14.5705 13.0984 16.0426  Syn\n1_2         14.5705 13.0810 16.0600  Syn\n2_0.5       14.4985 12.9780 16.0191  Syn\n2_1         14.4985 12.9668 16.0303  Syn\n2_2         14.4985 12.9557 16.0414  Syn\n\nPointwise 95% confidence intervals summary:\n Syn Ant Total\n  18   0    18\n\n\nCode\nrsb2 <- fitSurface(caz_azt, marginalFit2, \n                  null_model = \"bliss\",\n                  B.CP = 50, statistic = \"both\", parallel = FALSE)\nsummary(rsb2)\n\n\nNull model: Bliss independence with shared maximal response\nVariance assumption used: \"equal\"\n\nFormula: effect ~ fn(h1, h2, b = 9, m1 = 24, m2 = 24, e1, e2, d1, d2)\nTransformations: No\n\n                 CTZ/AVI    AZT\nSlope              0.231  1.358\nMaximal response  24.000 24.000\nlog10(EC50)        6.637  1.853\n\nCommon baseline at: 9\n\nExact meanR test (H0 = no synergy/antagonism):\n    F(18,27) = 286.4537 (p-value < 2e-16)\n\nEvidence for effects in data: Syn\nPoints with significant deviations from the null: \n             d1    d2      absR p-value call\n0.25_0.03  0.25 0.030 15.231196  <2e-16  Ant\n0.25_0.06  0.25 0.060 13.224605  <2e-16  Ant\n0.25_0.125 0.25 0.125  9.746649  <2e-16  Ant\n0.25_0.25  0.25 0.250 11.313417  <2e-16  Ant\n0.5_0.03   0.50 0.030 10.450108  <2e-16  Ant\n0.5_0.06   0.50 0.060 17.302816  <2e-16  Ant\n0.5_0.125  0.50 0.125 11.551339  <2e-16  Syn\n0.5_0.25   0.50 0.250 37.542972  <2e-16  Syn\n1_0.03     1.00 0.030 11.694469  <2e-16  Ant\n1_0.06     1.00 0.060 15.214053  <2e-16  Ant\n1_0.125    1.00 0.125 13.636296  <2e-16  Syn\n1_0.25     1.00 0.250 34.039476  <2e-16  Syn\n1_0.5      1.00 0.500  6.264769   1e-05  Syn\n1_1        1.00 1.000 15.416567  <2e-16  Syn\n1_2        1.00 2.000 10.348188  <2e-16  Syn\n2_0.5      2.00 0.500 16.033022  <2e-16  Syn\n2_1        2.00 1.000 12.720233  <2e-16  Syn\n2_2        2.00 2.000  7.685636  <2e-16  Syn\n\nOverall maxR summary:\n Call Syn Ant Total\n  Syn  10   8    18\n\nCONFIDENCE INTERVALS\nOverall effect\nEstimated mean departure from null response surface with 95% confidence interval:\n8.544 [8.4628, 8.6658]\nEvidence for effects in data: Syn \n\nSignificant pointwise effects\n           estimate   lower   upper call\n0.25_0.03    2.4052  0.5501  4.2602  Syn\n0.25_0.06    2.5146  0.5988  4.4303  Syn\n0.25_0.125   2.6829  0.6101  4.7557  Syn\n0.25_0.25    4.0138  2.0964  5.9311  Syn\n0.5_0.03     2.1320  0.0200  4.2440  Syn\n0.5_0.06     3.2364  1.3483  5.1245  Syn\n0.5_0.125    8.3381  6.4744 10.2018  Syn\n0.5_0.25    14.6256 12.7112 16.5400  Syn\n1_0.03       3.5701  1.5481  5.5921  Syn\n1_0.06       3.7929  1.8159  5.7698  Syn\n1_0.125      9.3062  7.3788 11.2336  Syn\n1_0.25      14.5638 12.5880 16.5396  Syn\n1_0.5       10.3032  8.1418 12.4647  Syn\n1_1         14.5264 12.3706 16.6821  Syn\n1_2         14.4579 12.1955 16.7203  Syn\n2_0.5       14.4814 12.2443 16.7184  Syn\n2_1         14.4546 12.2270 16.6822  Syn\n2_2         14.3865 12.0675 16.7054  Syn\n\nPointwise 95% confidence intervals summary:\n Syn Ant Total\n  18   0    18"
  },
  {
    "objectID": "Presentations.html",
    "href": "Presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "Protocols.html",
    "href": "Protocols.html",
    "title": "Protocols",
    "section": "",
    "text": "sterile 15 ml falcon tube \nglass tubes\ntube racks\nDensiCHEK plus Biomerieux\nVortex\n100-1000 mcl mechanical pipette\n1 ml sterile insulin syringe\nserum from healthy volunteers\nsaline sterile solution\nMH broth\nBacT/ALERT FA FAN® Aerobic Biomeriuex blood culture bottles\nBacT/ALERT SA Standard Aerobic Biomerieux blood culture bottles (without inactivating matrix)\nBact/ALERT 3D Biomerieux incubator system\n\n\n\n\n\nBacterial strains were obtained from the banked collection of the Microbiology Unit, Hub Laboratory, AUSL Romagna, Cesena, Italy.\nEach day before testing, strains are thawed and incubated at 37°C for 18-24 hours.\n\n\n\n\n\n\n\n\n\n\nIsolate\nAbbreviaiton\nEnzyme\nCeftazidime/Avibactam MIC (mg/L)\n\n\n\n\nKlebsiella pneumoniae ESBL ATCC 700603\nKP_ATCC\nbla SHV-18\nMIC needed\n\n\nKlebsiella pneumoniae KPC- A\nKP_KPC_A\nKPC-3\n2\n\n\nKlebsiella pneumoniae KPC- B\nKP_KPC_B\nKPC-3\n1\n\n\nKlebsiella pneumoniae KPC- C\nKP_KPC_C\nKPC-3\n\n\n\nKlebsiella pneumoniae NDM\nKP_NDM\nNDM-2\n>256\n\n\nKlebsiella pneumonia VIM\nKP_VIM\nVIM\n>256\n\n\n\nMICs were performed and confirmed by Etest\n\n\n\nThe proposed method are a modification of Tpos assay as proposed by Kaltsas et al.\nDilution schemes are from the Clinical Laboratory Standards Institute (CLSI) M21-A Methodology for the Serum Bactericidal Test and M26A Methodology for Determining Bactericidal Activity of Antibiotics.\nTo prepare a standardized inoculum (1.5 x102 CFU/mL) for injection in blood culture bottles:\n\nColonies are selected from an 18- to 24-hour agar plate and suspended in sterile 0.9% phosphate buffered saline (PBS) in a glass test tube. The suspension is then adjusted by optimal density using a Densichek turbidity meter to an equivalent to a 0.5 McFarland standard corresponding to 1 to 2 × 108 CFU/mL.\nThe inoculum is then serially diluted using ten-fold dilution scheme: 200 μL inoculum dispensed by micropipette into 1800 μL 0.9% saline → vortexed → then 200 μL of this suspension is pipetted into a fresh tube containing 1800 μL 0.9% saline, etc.) until a final inoculum of 1.5 x102 CFU/ml is reached.\n\nNote the final dilution step is repeated an additional 5 times in replicate tubes to ensure 6 tubes (12 mL of the final 1.5 x102 CFU/mL) are available to inoculate 10 blood culture bottles.\n\n\n\n\n\nAnalytical grade (> 99% pure) ceftazidime (200 μg/mL) and avibactam (500 μg/mL) pure powder are diluted separately in sterile water to prepare a stock solution of ceftazidime (200 μg/mL) and avibactam (500 μg/mL). The stock solution is dispensed into 2 mL sterile cryo-vials and stored at -20°C.\nFrozen stock antibiotic solution in cryo-vials is thawed the day of the experiment and diluted at twice the final test concentration using either (a) pooled patient serum; or (b) 0.9% PBS.\n\nExample: to obtain 2 mL of 20 mcg/ml stock: 200 μL of ceftazidime 200 mg/mL solution is pipetted into a test-tube containing 1800 μL of serum\nExample to obtain 50 μg/mL: using the multipipettor set at 500 μL, 500 μL of ceftazidime 200 μg/ml solution are added in a tube containing 1500 μL of serum\n500 μL of the ceftazidime 2x concentration and 500 μL of the 2x avibactam concentration are then added in a test tube to obtain 1 ml of serum-antibiotic solution at the desired concentrations\n\nAfter vortexing for 7-10 seconds each tube, 1 ml of inoculum suspension at 1.5x102 CFU/mL and 1 mL of antibiotic containing serum are inoculated with a sterile insulin syringe into a blood culture bottle containing 40 mL of enrichment broth without inactivating matrix.\nBloodculture bottles are then incubated into Bact/ALERT system to detect growth. The same procedure is repeated for all the selected antibiotic concentration-inoculum pairs.\nOne bottle is inoculated with the bacterial inoculum without adding the antibiotic solution (drug-free control).\ndescribe incubation conditions, incubator settings, etc. \nhow are data collected from the software etc."
  },
  {
    "objectID": "mrkov.html",
    "href": "mrkov.html",
    "title": "markov",
    "section": "",
    "text": "title: “Multilevel HMM tutorial”\nauthor:\nname: “Emmeke Aarts”\naffiliation: “Department of Methodology and Statistics, Utrecht University, Utrecht, the Netherlands <br>”\nabstract: >\nWith the \\code{R} package mHMMbayes you can fit multilevel hidden Markov models. The multilevel hidden Markov model (HMM) is a generalization of the well-known hidden Markov model, tailored to accommodate (intense) longitudinal data of multiple individuals simultaneously. Using a multilevel framework, we allow for heterogeneity in the model parameters (transition probability matrix and conditional distribution), while estimating one overall HMM. The model has a great potential of application in many fields, such as the social sciences and medicine. The model can be fitted on multivariate data with a categorical distribution, and include individual level covariates (allowing for e.g., group comparisons on model parameters). Parameters are estimated using Bayesian estimation utilizing the forward-backward recursion within a hybrid Metropolis within Gibbs sampler. The package also includes a function to simulate data and a function to obtain the most likely hidden state sequence for each individual using the Viterbi algorithm.\noutput:\nrmarkdown::html_vignette:\nmathjax: default\nbibliography: bibliography.bib\nvignette: >\n%\\VignetteIndexEntry{Multilevel HMM tutorial}\n%\\VignetteEngine{knitr::rmarkdown}\n%\\VignetteEncoding{UTF-8}\n% \\VignetteDepends{RColorBrewer}\n---\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(\ncollapse = TRUE,\ncomment = “#>”\n)\n```\n<br> <br>\n## Introduction\nHidden Markov models [HMMs; @Rabiner1989] are a machine learning method that have been used in many different scientific fields to describe a sequence of observations for several decades. For example, translating a fragment of spoken words into text [i.e., speech recognition, see e.g. @Rabiner1989; @woodland2002], or the identification of the regions of DNA that encode genes [i.e., gene tagging, see e.g., @krogh1994; @henderson1997; @burge1998]. The development of this package is, however, motivated from the area of social sciences. Due to technological advancements, it becomes increasingly easy to collect long sequences of data on behavior. That is, we can monitor behavior as it unfolds in real time. An example here of is the interaction between a therapist and a patient, where different types of nonverbal communication are registered every second for a period of 15 minutes. When applying HMMs to such behavioral data, they can be used to extract latent behavioral states over time, and model the dynamics of behavior over time. \\\nA quite recent development in HMMs is the extension to multilevel HMMs [see e.g., @altman2007; @shirley2010; @rueda2013; @zhang2014; @deHaan2017]. Using the multilevel framework, we can model several sequences (e.g., sequences of different persons) simultaneously, while accommodating the heterogeneity between persons. As a result, we can quantify the amount of variation between persons in their dynamics of behavior, easily perform group comparisons on the model parameters, and investigate how model parameters change as a result of a covariate. For example, are the dynamics between a patient and a therapist different for patients with a good therapeutic outcome and patients with a less favorable therapeutic outcome? \\\nWith the package `mHMMbayes`, one can estimate these multilevel hidden Markov models. This tutorial starts out with a brief description of the HMM and the multilevel HMM. For a more elaborate and gentle introduction to HMMs, we refer to @zucchini2016. Next, we show how to use the package `mHMMbayes` through an extensive example, also touching on the issues of determining the number of hidden states and checking model convergence. Information on the used estimation methods and algorithms in the package is given in the vignette Estimation of the multilevel hidden Markov model.\n## Hidden Markov models\nHidden Markov Models are used for data for which 1) we believe that the distribution generating the observation depends on the state of an underlying, hidden state, and 2) the hidden states follow a Markov process, i.e., the states over time are not independent of one another, but the current state depends on the previous state only (and not on earlier states) [see e.g., @Rabiner1989; @ephraim2002; @cappe2005; @zucchini2016]. The HMM is a discrete time model: for each point in time $t$, we have one hidden state that generates one observed event for that time point $t$. \\\nHence, the probability of observing the current outcome $O_t$ is exclusively determined by the current latent state $S_t$:\n\\begin{equation}\nPr(O_{t} \\mid \\ O_{t-1}, O_{t-2}, \\ldots, O_{1}, \\ S_{t}, S_{t-1}, \\ldots, S_{1}) = Pr(O_{t} \\mid S_{t}).\n\\end{equation}\nThe probability of observing $O_t$ given $S_t$ can have any distribution, e.g., discrete or continuous. In the current version of the package `mHMMbayes`, only the categorical emission distribution is implemented. \\\nThe hidden states in the sequence take values from a countable finite set of states $S_t = i, i \\in \\{1, 2, \\ldots, m\\}$, where $m$ denotes the number of distinct states, that form the Markov chain, with the Markov property:\n\\begin{equation}\nPr(S_{t+1} \\mid \\ S_{t}, S_{t-1}, \\ldots, S_{1}) = Pr(S_{t+1} \\mid S_{t}).\n\\end{equation}\nThat is, the probability of switching to the next state $S_{t+1}$ depends only on the current state $S_t$. As the HMM is a discrete time model, the duration of a state is represented by the self-transition probabilities $\\gamma_{ii}$, where the probability of a certain time t spent in state $S$ is given by the geometric distribution: $\\gamma_{ii}^{t-1}(1-\\gamma_{ii})$. \\\nThe HMM includes three sets of parameters: the initial probabilities of the states $\\pi_i$, the matrix $\\mathbf{\\Gamma}$ including the transition probabilities $\\gamma_{ij}$ between the states, and the state-dependent probability distribution of observing $O_t$ given $S_t$ with parameter set $\\boldsymbol{\\theta}_i$. The initial probabilities $\\pi_i$ denote the probability that the first state in the hidden state sequence, $S_1$, is $i$:\n\\begin{equation}\n\\pi_i = Pr(S_1 = i) \\quad \\text{with} \\sum_i \\pi_i = 1.\n\\end{equation}\nOften, the initial probabilities of the states $\\pi_i$ are assumed to be the stationary distribution implied by the transition probability matrix $\\mathbf{\\Gamma}$, that is, the long term steady-state probabilities obtained by $\\lim_{T \\rightarrow \\infty} \\mathbf{\\Gamma}^T$. The transition probability matrix $\\mathbf{\\Gamma}$ with transition probabilities $\\gamma_{ij}$ denote the probability of switching from state $i$ at time $t$ to state $j$ at time $t+1$:\n\\begin{equation}\n\\gamma_{ij} = Pr(S_{t+1} = j \\mid S_{t} = i) \\quad \\text{with} \\sum_j \\gamma_{ij} = 1.\n\\end{equation}\nThat is, the transition probabilities $\\gamma_{ij}$ in the HMM represent the probability to switch between hidden states rather than between observed acts, as in the MC and CTMC model. The state-dependent probability distribution denotes the probability of observing $O_t$ given $S_t$ with parameter set $\\boldsymbol{\\theta}_i$. In case of the package, the state-dependent probability distribution is given by the categorical distribution, and the parameter set $\\boldsymbol{\\theta}_i$ is the set of state-dependent probabilities of observing categorical outcomes. That is,\n\\begin{equation}\nPr(O_t = o \\mid S_t = i) \\sim \\text{Cat} (\\boldsymbol{\\theta}_i),\n\\end{equation}\nfor the observed outcomes $o = 1, 2, \\ldots, q$ and where $\\boldsymbol{\\theta}_i = (\\theta_{i1}, \\theta_{i2}, \\ldots, \\theta_{iq})$ is a vector of probabilities for each state $S = i, \\ldots, m$ with $\\sum \\theta_i = 1$, i.e., within each state, the probabilities of all possible outcomes sum up to 1. \\\nWe assume that all parameters in the HMM are independent of $t$, i.e., we assume a time-homogeneous model. In the vignette Estimation of the multilevel hidden Markov model we discuss three methods (i.e., Maximum likelihood, Expectation Maximization or Baum-Welch algorithm, and Bayesian estimation) to estimate the parameters of an HMM. In the package `mHMMbayes`, we chose to use Bayesian estimation because of its flexibility, which we will require in the multilevel framework of the model.\n## Multilevel hidden Markov models\nGiven data of multiple subjects, one may fit the HMM to the data of each subject separately, or fit one and the same HMM model to the data of all subject, under the strong (generally untenable) assumption that the subjects do not differ with respect to the parameters of the HMM. Fitting a different model to each behavioral sequence is not parsimonious, computationally intensive, and results in a large number of parameters estimates. Neither approach lends itself well for a formal comparison (e.g., comparing the parameters over experimental conditions). To facilitate the analysis of multiple subjects, the HMM is extended by putting it in a multilevel framework. \\\nIn multilevel models, model parameters are specified that pertain to different levels in the data. For example, subject-specific model parameters describe the data collected within each subject, and group level parameters describe what is typically observed within the group of subjects, and the variation observed between subjects. In the implemented multilevel HMM, we allow each subject to have its own unique parameter values within the same HMM model (i.e., identical number and similar composition of the hidden states). Rather than estimating these subject-specific parameters individually, we assume that the parameters of the HMM are random, i.e., follow a given group level distribution. Within this multilevel structure, the mean and the variance of the group level distribution of a given parameter thus expresses the overall mean parameter value in a group of subjects and the parameter variability between the subjects in the group. \\\nMultilevel HMMs have received some attention in the literature. In a frequentist context, @altman2007 presented a general framework for HMMs for multiple processes by defining a class of Mixed Hidden Markov Models (MHMMs). These models are however, computationally intensive and due to slow convergence only suited for modeling a limited number of random effects. The approach of Altman has been translated to the Bayesian framework, which proved much faster as the time to reach convergence is decreased @zhang2014. In addition, the HMM in a Bayesian context is easier to adapt to a multilevel model, as the need for numerical integration is eliminated. Examples of the application of the multilevel HMM (within a Bayesian framework) are: @rueda2013 applied the model to the analysis of DNA copy number data, @zhang2014 to identify risk factors for asthma, @shirley2010 to clinical trial data of a treatment for alcoholism and @deHaan2017 to longitudinal data sets in psychology. \\\nIn the tutorial, we use the following notation for the parameters in the multilevel HMM. The subject specific parameters are supplemented with the prefix $k$, denoting subject $k \\in \\{1,2,\\ldots,K\\}$. Hence, in the multilevel (Bayesian) HMM, the subject specific parameters are: the subject-specific transition probability matrix $\\boldsymbol{\\Gamma}_k$ with transition probabilities $\\gamma_{k,ij}$, and the subject-specific emission distributions denoting subject-specific probabilities $\\boldsymbol{\\theta}_{k,i}$ of categorical outcomes within hidden state $i$. The initial probabilities of the states $\\pi_{k,j}$ are not estimated as $\\pi_{k}$ is assumed to be the stationary distribution of $\\boldsymbol{\\Gamma}_k$. The group level parameters are: the group level state transition probability matrix $\\boldsymbol{\\Gamma}$ with transition probabilities $\\gamma_{ij}$, and the group level state-dependent probabilities $\\boldsymbol{\\theta}_{i}$. We fit the model using Bayesian estimation (i.e., a hybrid Metropolis Gibbs sampler that utilizes the forward-backward recursion to sample the hidden state sequence of each subject, see the vignette Estimation of the multilevel hidden Markov model).\n## Using the package mHMMbayes\nWe illustrate using the package using the embedded example data `nonverbal`. The data contains the nonverbal communication of 10 patient-therapist couples, recorded for 15 minutes at a frequency of 1 observation per second (= 900 observations per couple). The following variables are contained in the dataset:\n* `id`: id variable of patient - therapist couple to distinguish which observation belongs to which couple.\n* `p_verbalizing`: verbalizing behavior of the patient, consisting of 1 = not verbalizing, 2 = verbalizing, 3 = back channeling.\n* `p_looking`: looking behavior of the patient, consisting of 1 = not looking at therapist, 2 = looking at therapist.\n* `t_verbalizing`: verbalizing behavior of the therapist, consisting of 1 = not verbalizing, 2 = verbalizing, 3 = back channeling.\n* `t_looking`: looking behavior of the therapist, consisting of 1 = not looking at patient, 2 = looking at patient.\nThe top 6 rows of the dataset are provided below.\n```{r load package and data, include = FALSE}\nlibrary(mHMMbayes)\nnonverbal <- data.frame(nonverbal)\nhead(nonverbal)\nold_par <- graphics::par(no.readonly =TRUE)\n```\nWhen we plot the data of the first 5 minutes (= the first 300 observations) of the first couple, we get the following:\n```{r plot observed data, fig.width = 7.2, fig.height = 3.5, echo = FALSE}\n# set labels and colors for the observed behavioral categorical outcomes\nlibrary(RColorBrewer)\nVoc_lab <- c(“Not Speaking”, “Speaking”, “Back channeling”)\nLook_lab <- c(“Not looking”, “Looking”)\nVoc_col <- c(brewer.pal(3,“PuBuGn”)[c(1,3,2)])\nLook_col <- c(brewer.pal(3,“YlOrRd”)[-3])\ncols = list(Voc_col, Look_col, Voc_col, Look_col)\ntime_s <- seq(1,900)\ncouple1 <- cbind(nonverbal[nonverbal$id == 1,], time_s)\npar(mar = c(4.3, 6.6, 2.1, 1.1))\nplot(x = 1, xlim = c(0,300), ylim = c(0.5,6), type = “n”, las = 1, xlab = “Time in minutes”, xaxt = “n”, yaxt = “n”, ylab = ““)\naxis(2, at = seq(1,4), tick = FALSE, labels = c(“P_vocalizing”, “P_Looking”, “T_vocalizing”, “T_Looking”), las = 1)\naxis(1, at = seq(0,300,60), tick = TRUE, las = 1, labels = FALSE)\naxis(1, at = seq(0,300,60), tick = FALSE, las = 1, labels = seq(1,6,1))\nabline(v = seq(0,300,60), col = “gray85”)\nfor(j in 2:5){\nfor(i in 1:max(nonverbal[,j])){\npoints(x = couple1$time_s[1:300][couple1[1:300,j] == i],\ny = rep(j-1, sum(couple1[1:300,j] == i)),\npch = “|”, col = cols[[j-1]][i])\n}\n}\nlegend(“topright”, bty = “n”, fill = Voc_col, legend = Voc_lab)\nlegend(“topleft”, bty = “n”, fill = Look_col, legend = Look_lab)\ngraphics::par(old_par)\n```\nWe can, for example, observe that both the patient and the therapist are mainly looking at each other during the observed 5 minutes. During the first minute, the patient is primarily speaking. During the second minute, the therapists starts, after which the patient takes over while the therapist is back channeling.\n### A simple model\nTo fit a simple 2 state multilevel model with the function `mHMM`, one first has to specify some general model properties and starting values:\n```{r settings and load 2 state model, include = FALSE}\n# specifying general model properties:\nm <- 2\nn_dep <- 4\nq_emiss <- c(3, 2, 3, 2)\n# specifying starting values\nstart_TM <- diag(.8, m)\nstart_TM[lower.tri(start_TM) | upper.tri(start_TM)] <- .2\nstart_EM <- list(matrix(c(0.05, 0.90, 0.05,\n0.90, 0.05, 0.05), byrow = TRUE,\nnrow = m, ncol = q_emiss[1]), # vocalizing patient\nmatrix(c(0.1, 0.9,\n0.1, 0.9), byrow = TRUE, nrow = m,\nncol = q_emiss[2]), # looking patient\nmatrix(c(0.90, 0.05, 0.05,\n0.05, 0.90, 0.05), byrow = TRUE,\nnrow = m, ncol = q_emiss[3]), # vocalizing therapist\nmatrix(c(0.1, 0.9,\n0.1, 0.9), byrow = TRUE, nrow = m,\nncol = q_emiss[4])) # looking therapist\nload(“nonv_2st_1000it.rda”)\nout_2st <- out1\n```\n```{r show specifying 2 state model, eval = FALSE}\nlibrary(mHMMbayes)\n# specifying general model properties:\nm <- 2\nn_dep <- 4\nq_emiss <- c(3, 2, 3, 2)\n# specifying starting values\nstart_TM <- diag(.8, m)\nstart_TM[lower.tri(start_TM) | upper.tri(start_TM)] <- .2\nstart_EM <- list(matrix(c(0.05, 0.90, 0.05,\n0.90, 0.05, 0.05), byrow = TRUE,\nnrow = m, ncol = q_emiss[1]), # vocalizing patient\nmatrix(c(0.1, 0.9,\n0.1, 0.9), byrow = TRUE, nrow = m,\nncol = q_emiss[2]), # looking patient\nmatrix(c(0.90, 0.05, 0.05,\n0.05, 0.90, 0.05), byrow = TRUE,\nnrow = m, ncol = q_emiss[3]), # vocalizing therapist\nmatrix(c(0.1, 0.9,\n0.1, 0.9), byrow = TRUE, nrow = m,\nncol = q_emiss[4])) # looking therapist\n```\nThe first line of code loads the `mHMMbayes` package and the `nonverbal` data. Next we specify the general model properties: the number of states used is set by `m <- 2`, the number of dependent variables in the dataset used to infer the hidden states is specified by `n_dep <- 4`, and the number of categorical outcomes for each of the dependent variables is specified by `q_emiss <- c(3, 2, 3, 2)`.\n#### Starting values\nThe subsequent lines of code specify starting values for both the transition probability matrix and the emission distribution(s), which are given to the model in the argument `start_val` (see next piece of code). These starting values are used for the first run of the forward backward algorithm. Although the hidden states cannot be observed, one often has an idea for probable compositions of the states. In the example, we expect that there is a state in which the patient mostly speaks, and the therapist is silent, and a state during which the patient is silent and the therapists speaks. In addition, we expect that during both states, the therapist and the patient will be mainly looking at each other instead of looking away. One usually also has some (vague) idea on likely and unlikely switches between states, and the size of self-transition probabilities. In the example, we think a state will usually last quite some seconds, and thus expect a rather high self-transition probability. All these ideas can be used to construct a set of sensible starting values. Using sensible starting values increases convergence speed, and often prevents a problem called ‘label switching’. Hence, using random or uniform starting values is not recommended, and a default option to do so is not included in the package. Note that it is strongly advised to check model convergence and label switching. That is, one should check if the algorithm reaches the same solution when a set of different (but often conceptually similar) starting values are used, and if label switching is not a problem. See the section *Checking model convergence and label switching* for an example. See the vignette Estimation of the multilevel hidden Markov model) for more information on the forward backward algorithm and on the problem of label switching.\n#### Prior distributions\nAs the estimation proceeds within a Bayesian context, a (hyper-)prior distribution has to be defined for the group level parameters, i.e., the group level emission and transition probabilities. Default, non-informative priors are used unless specified otherwise by the user. Below, we present some information on this. For a more elaborate explanation on the used (hyper-)prior distributions and their parameters, see the vignette Estimation of the multilevel hidden Markov model. \\\nFirst of all, note that the prior distributions on the emission distribution and transition probabilities are not on the probabilities directly, but on the intercepts (and regression coefficients given that covariates are used) of the Multinomial regression model used to accommodate the multilevel framework of the data. Second, parameters do not each have their own independent prior distribution. As each row of the emission distribution matrix and transition probability matrix sum to one, the individual parameters of these rows are connected. Hence, each row is seen as a set of parameters which are estimated jointly, and each set of parameters has a multivariate prior distribution. \\\nThe sets of intercepts of the Multinomial regression model have a multivariate normal distribution. The (hyper-) prior for these intercepts thus consists of a prior distribution on the vector of means, and a prior distribution on the covariance matrix. The hyper-prior for the mean intercepts is a multivariate Normal distribution, with, as default, a vector of means equal to 0, and a parameter $K_0$ with which the covariance matrix is multiplied. Here, $K_0$ denotes the number of observations (i.e., the number of hypothetical prior subjects) on which the prior mean vector of zero’s is based. By default, $K_0$ is set to 1. The hyper-prior for the covariance matrix between the set of (state specific) intercepts has an Inverse Wishart distribution, for which the variance in the default setting equals 3 + $m$ - 1 for the transition probabilities and 3 + $q$ - 1 for the emission probabilities, and the covariance equals 0. The degrees of freedom of the Inverse Wishart distribution is set to 3 + $m$ - 1 for the transition probabilities and 3 + $q$ - 1 for the emission probabilities. \\\nTo specify user specific prior distributions, one uses the input option `emiss_hyp_prior` for the emission distribution and `gamma_hyp_prior` for the transition probabilities in the function `mHMM`. These input arguments take an object from the class `mHMM_prior_emiss` and `mHMM_prior_gamma` created by the functions `prior_emiss_cat` and `prior_gamma`, respectively. Both objects are a list, containing the following key elements:\n* `mu0`, a lists containing the hypothesized hyper-prior mean values of the intercepts of the Multinomial logit model.\n* `K0`, the number of hypothetical prior subjects on which the set of hyper-prior mean intercepts specified in `mu0` are based.\n* `nu`, degrees of freedom of the hyper-prior Inverse Wishart distribution on the covariance of the Multinomial logit intercepts.\n* `V`, the variance-covariance of the hyper-prior Inverse Wishart distribution on the covariance of the Multinomial logit intercepts.\nNote that `K0`, `nu` and `V` are assumed equal over the states. The mean values of the intercepts (and regression coefficients of the covariates) denoted by `mu0` are allowed to vary over the states. All elements in the list either have the prefix `gamma_` or `emiss_`, depending on which list they belong to. When specifying prior distributions, note that the first element of each row in the probability domain does not have an intercept, as it serves as baseline category in the Multinomial logit regression model. This means, for example, that if we would specify a model with 3 states, `mu0` is a vector with 2 elements, `K0` and `nu` contain 1 element and `V` is a 2 by 2 matrix.\n#### Fitting the model\nThe multilevel HMM is fitted using the function `mHMM`:\n```{r show fitting 2 state model, eval = FALSE}\n# Run a model without covariate(s) and default priors:\nset.seed(14532)\nout_2st <- mHMM(s_data = nonverbal,\ngen = list(m = m, n_dep = n_dep, q_emiss = q_emiss),\nstart_val = c(list(start_TM), start_EM),\nmcmc = list(J = 1000, burn_in = 200))\n```\nThe call to `mHMM` specifies the model with several arguments. The `s_data` argument specifies the input data used to infer the hidden states over time. The `gen` and `start_val` argument specify the general model properties and the starting values, as discussed above. The arguments needed for the MCMC algorithm are given in `mcmc`: `J` specifies the number of iterations used by the hybrid metropolis within Gibbs algorithm and `burn_in` specifies the number of iterations to discard when obtaining the model parameter summary statistics. The function `mHMM` returns an object of class `mHMM`, which has `print` and `summary` methods to see the results. The `print` method provides basic information on the model fitted. That is, the number of subjects in the dataset analyzed, the number of iterations and burn-in period, the average log likelihood over all subjects and model fit indices AIC, the number of states specified, and the number of dependent variables the states are based on:\n```{r show print model}\nout_2st\n```\nThe `summary` method provides information on the estimated parameters. That is, the point estimates of the posterior distribution for the transition probability matrix and the emission distribution of each of the dependent variables at the group level:\n```{r show summary model}\nsummary(out_2st)\n```\nThe resulting model indicates 2 well separated states: one in which the patient is speaking and one in which the therapist is speaking. Looking behavior is quite similar for both the patient and the therapist in the 2 states. Information on the estimated parameters can also be obtained using the function `obtain_gamma` and `obtain_emiss`. These functions allow the user not only to inspect the estimated parameters at the group level, but for each subject individually as well, by specifying the input variable `level = “subject”`: \\\n```{r show obtain gamma function}\n# When not specified, level defaults to “group”\ngamma_pop <- obtain_gamma(out_2st)\ngamma_pop\n# To obtain the subject specific parameter estimates:\ngamma_subj <- obtain_gamma(out_2st, level = “subject”)\ngamma_subj\n```\nAn additional option that the functions `obtain_gamma` and `obtain_emiss` offer is changing the burn-in period used for obtaining the summary statistics, using the input variable `burn_in`.\n### Graphically displaying outcomes\nThe package includes several plot functions to display the fitted model and its parameters. First, one can plot the posterior densities of a fitted model, for both the transition probability matrix gamma and for the emission distribution probabilities. The posterior densities are plotted for the group level and the subject level simultaneously. For example, for the emission distribution for the variable `p_vocalizing`:\n```{r show plot posterior densities, fig.width = 7.2, fig.height = 4}\nlibrary(RColorBrewer)\nVoc_col <- c(brewer.pal(3,“PuBuGn”)[c(1,3,2)])\nVoc_lab <- c(“Not Speaking”, “Speaking”, “Back channeling”)\nplot(out_2st, component = “emiss”, dep = 1, col = Voc_col,\ndep_lab = c(“Patient vocalizing”), cat_lab = Voc_lab)\n```\nHere, `component` specifies whether we want to visualize the posterior densities for the transition probability matrix gamma (`component = “gamma”`) or for the emission distribution probabilities (`component = “emiss”`), when using `component = “emiss”` the input variable `dep` specifies which dependent variable we want to inspect (as the variable `p_vocolizing` is the first variable in the set, we set `dep = 1`), `col` specifies the colors to be used when plotting the lines, `dep_lab` denotes the label of the dependent variable we are plotting, and `cat_lab` denotes the labels of the categorical outcomes in the dependent variable. In the plot, the solid line visualizes the posterior density at the group level, while each of the dotted lines visualizes the posterior density of one subject. \\\nSecond, one can plot the transition probabilities obtained with the function `obtain_gamma` with a riverplot:\n```{r show plot transition prob, fig.show=‘hold’}\n# Transition probabilities at the group level and for subject number 1, respectively:\nplot(gamma_pop, col = rep(rev(brewer.pal(3,“PiYG”))[-2], each = m))\nplot(gamma_subj, subj_nr = 1, col = rep(rev(brewer.pal(3,“PiYG”))[-2], each = m))\n```\nNote that graphically displaying the transition probabilities becomes more informative as the number of states increase. \\\n```{r load 3 and 4 state models, include = FALSE}\n# load(“nonv_3st_1000it.rda”)\n# out_3st <- out2\nload(“nonv_4st_1000it.rda”)\nout_4st <- out3\n```\n### Determining the number of hidden states\nThe first step in developing a HMM is to determine the number of states $m$ that best describes the observed data, and is a model selection problem. When modelling, for example, behavior, the task is to define the states by clusters of observed behavioral outcomes that provide a reasonable, theoretically interpretable, description of the data. We suggest using a combination of the Akaike Information Criterion (AIC) and the theoretical interpretability of the estimated states to choose between models^[Note that the likelihood ratio test, commonly used to compare nested models, cannot be used in case of the HMM (i.e., the difference in the log-likelihoods between models is not $\\chi^2$ distributed @ryden2008).]. In the example dataset, the 2, 3 and 4 state model result in an AIC of 3279, 3087, and 2959, respectively. According to model fit indices, the 4 state model is clearly the best model^[We note, however, that the AIC approximates the posterior distribution of the parameters by a Gaussian distribution, which might not be appropriate for models including parameters on the boundary of the parameter space (e.g., close to 0 or 1 in case of probability estimates), or for small data sets, as exemplified by @scott2002. Model selection is therefore not a straightforward procedure in the context of HMM, and the choices remain subjective.]. Let’s inspect the composition of the states for the 4 state model, and the transition probabilities:\n```{r show 4 state model, fig.width = 5, fig.height = 3}\nsummary(out_4st)\nm <- 4\nplot(obtain_gamma(out_4st), cex = .5, col = rep(rev(brewer.pal(5,“PiYG”))[-3], each = m))\n```\nWe can see that we have a state in which the patient speaks and the therapist is silent (state 1), a state in which the patient is silent and the therapist speaks (state 2), a state in which both the patient and therapist speak (state 3) and a state in which the therapist speaks but does not look at the patient (in contrast to the looking behavior in all other states), and the patient is silent. In addition, all states are quite stable as the probability of remaining in the same state is above .6 for all states.\n### Determining the most likely state sequence\nGiven a well-fitting HMM, it may be of interest to determine the actual *sequence*, or order of succession, of hidden states that has most likely given rise to the sequence of outcomes as observed in a subject. One can either use local decoding, in which the probabilities of the hidden state sequence are obtained simultaneously with the model parameters estimates, or the well-known Viterbi algorithm [@viterbi1967; @forney1973]. In local decoding, the most likely state is determined separately at each time point $t$, in contrast to the Viterbi algorithm in which one determines the joint probability of the complete sequence of observations $O_{1:T}$ and the complete sequence of hidden states $S_{1:T}$. \\\nIn the package, local decoding can be achieved by saving the sampled hidden state sequence at each iteration of the Gibbs sampler, by setting the input variable `return_path = TRUE` for the function `mHMM`. This will result in very large output files, however. Global decoding can be performed by using the function `vit_mHMM`:\n```{r using viterbi algorithm}\nstate_seq <- vit_mHMM(out_2st, s_data = nonverbal)\nhead(state_seq)\n```\nThe function returns the hidden state sequence for each subject in a matrix, where each row represents a point in time and each column represents a subject. We can inspect the obtained hidden state sequence by for example plotting it together with the observed data. Below, the first 5 minutes of the first couple is plotted again, with the addition of the estimated state sequence:\n```{r plotting observed data plus inferred states, fig.width = 7.2, fig.height = 4, echo = FALSE}\n# set labels and colors for the observed behavioral categorical outcomes\nVoc_lab <- c(“Not Speaking”, “Speaking”, “Back channeling”)\nLook_lab <- c(“Not looking”, “Looking”)\nVoc_col <- c(brewer.pal(3,“PuBuGn”)[c(1,3,2)])\nLook_col <- c(brewer.pal(3,“YlOrRd”)[-3])\ncols = list(Voc_col, Look_col, Voc_col, Look_col)\nState_col <- c(rev(brewer.pal(3,“PiYG”))[-2])\ntime_s <- seq(1,900)\ncouple1 <- cbind(nonverbal[nonverbal$id == 1,], time_s)\npar(mar = c(4.3, 6.6, 2.1, 1.1))\nplot(x = 1, xlim = c(0,300), ylim = c(-0.5,6), type = “n”, las = 1, xlab = “Time in minutes”, xaxt = “n”, yaxt = “n”, ylab = ““)\naxis(2, at = seq(0,4), tick = FALSE, labels = c(“State”, “P_vocalizing”, “P_Looking”, “T_vocalizing”, “T_Looking”), las = 1)\naxis(1, at = seq(0,300,60), tick = TRUE, las = 1, labels = FALSE)\naxis(1, at = seq(0,300,60), tick = FALSE, las = 1, labels = seq(1,6,1))\nabline(v = seq(0,300,60), col = “gray85”)\nfor(j in 2:5){\nfor(i in 1:max(nonverbal[,j])){\npoints(x = couple1$time_s[1:300][couple1[1:300,j] == i],\ny = rep(j-1, sum(couple1[1:300,j] == i)),\npch = “|”, col = cols[[j-1]][i])\n}\n}\nfor(i in 1:2){\npoints(x = couple1$time_s[1:300][state_seq[1:300,1] == i],\ny = rep(0, sum(state_seq[1:300,1] == i)),\npch = “|”, col = State_col[i])\n}\nlegend(“topright”, bty = “n”, fill = c(Look_col, “white”, Voc_col), legend = c(Look_lab, ““,Voc_lab),\nncol = 2, border = c(rep(“black”, 2), “white”, rep(“black”, 3)))\nlegend(“topleft”, bty = “n”, fill = State_col, legend = c(“State 1”, “State 2”))\ngraphics::par(old_par)\n```\n### Checking model convergence and label switching\nWhen using Bayesian estimation procedures, it is strongly advised to check model convergence and label switching. That is, one should check if the algorithm reaches the same solution when a set of different (but often conceptually similar) starting values are used, and if label switching is not a problem. With label switching, the label (i.e., which state represents what) ordering of the states switches over the iterations of the estimation algorithm. For example, what started out as state 1, now becomes state 2. One can check model convergence and label switching visually by inspecting the trace plots of parameters of a set of identical models that used varying starting values. Trace plots are plots of the sampled parameter values over the iterations. First, we fit the model with 2 states again, but with different starting values:\n```{r loading model convergence, include = FALSE}\n# specifying general model properties\nm <-2\nn_dep <- 4\nq_emiss <- c(3, 2, 3, 2)\n# specifying different starting values\nstart_TM <- diag(.8, m)\nstart_TM[lower.tri(start_TM) | upper.tri(start_TM)] <- .2\nstart_EM_b <- list(matrix(c(0.2, 0.6, 0.2,\n0.6, 0.2, 0.2), byrow = TRUE,\nnrow = m, ncol = q_emiss[1]), # vocalizing patient\nmatrix(c(0.4, 0.6,\n0.4, 0.6), byrow = TRUE, nrow = m,\nncol = q_emiss[2]), # looking patient\nmatrix(c(0.6, 0.2, 0.2,\n0.2, 0.6, 0.2), byrow = TRUE,\nnrow = m, ncol = q_emiss[3]), # vocalizing therapist\nmatrix(c(0.4, 0.6,\n0.4, 0.6), byrow = TRUE, nrow = m,\nncol = q_emiss[4])) # looking therapist\nload(“nonv_2stb_1000it.rda”)\nout_2st_b <- out1b\n```\n```{r showing model convergence I, eval= FALSE}\n# specifying general model properties\nm <-2\nn_dep <- 4\nq_emiss <- c(3, 2, 3, 2)\n# specifying different starting values\nstart_TM <- diag(.8, m)\nstart_TM[lower.tri(start_TM) | upper.tri(start_TM)] <- .2\nstart_EM_b <- list(matrix(c(0.2, 0.6, 0.2,\n0.6, 0.2, 0.2), byrow = TRUE,\nnrow = m, ncol = q_emiss[1]), # vocalizing patient\nmatrix(c(0.4, 0.6,\n0.4, 0.6), byrow = TRUE, nrow = m,\nncol = q_emiss[2]), # looking patient\nmatrix(c(0.6, 0.2, 0.2,\n0.2, 0.6, 0.2), byrow = TRUE,\nnrow = m, ncol = q_emiss[3]), # vocalizing therapist\nmatrix(c(0.4, 0.6,\n0.4, 0.6), byrow = TRUE, nrow = m,\nncol = q_emiss[4])) # looking therapist\n# Run a model identical to out_2st, but with different starting values:\nset.seed(9843)\nout_2st_b <- mHMM(s_data = nonverbal,\ngen = list(m = m, n_dep = n_dep, q_emiss = q_emiss),\nstart_val = c(list(start_TM), start_EM),\nmcmc = list(J = 1000, burn_in = 200))\n```\nThe group level parameter estimates of the emission probabilities and the transition probability matrix at each iteration of the estimation algorithm are stored in the objects `emiss_prob_bar` and `gamma_prob_bar`, respectively. The subject level parameter estimates are stored in the object `PD_subj`, where PD is an abbreviation for posterior density. If we, for example, want to inspect the trace plots for the emission probabilities for looking behavior of the patient at the group level, we use the following code:\n```{r showing model convergence II trace plots, fig.width = 7.2, fig.height = 7}\npar(mfrow = c(m,q_emiss[2]))\nfor(i in 1:m){\nfor(q in 1:q_emiss[2]){\nplot(x = 1:1000, y = out_2st$emiss_prob_bar[[2]][,(i-1) * q_emiss[2] + q],\nylim = c(0,1.4), yaxt = ‘n’, type = “l”, ylab = “Transition probability”,\nxlab = “Iteration”, main = paste(“Patient”, Look_lab[q], “in state”, i), col = “#8da0cb”)\naxis(2, at = seq(0,1, .2), las = 2)\nlines(x = 1:1000, y = out_2st_b$emiss_prob_bar[[2]][,(i-1) * q_emiss[2] + q], col = “#e78ac3”)\nlegend(“topright”, col = c(“#8da0cb”, “#e78ac3”), lwd = 2,\nlegend = c(“Starting value set 1”, “Starting value set 2”), bty = “n”)\n}\n}\n```\nIt can be observed that the parameter estimates converge to the same parameter space, and that the chains mix well. Also, there is no evidence of label switching.\n```{r, include = FALSE}\ngraphics::par(old_par)\n```\n## References"
  }
]